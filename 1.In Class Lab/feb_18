
#########################################################################################

#Stud: Austin


#########################################################################################

##### Ex. 1: It's a Trap

#########################################################################################
import numpy as np

def trapezoidal_rule(f, a, b, N):
    h = 1
    N = 1

    integral = (1/2) * (f(a) + f(b)) * h  # Matches the first & last term in the sum

    # Loop through k=1 to N-1 to sum the middle terms
    for k in range(1, N):
        xk = a + k * h  # Compute x_k explicitly (matches the formula)
        integral += f(xk) * h  # Normal weight (multiplied by h directly)

    return integral


def function(x):
    return np.exp(-x**2)

a = 0  # Integration bounds
b = 1  # Integration bounds
N = 1# Number of trapezoids

integral_approx = trapezoidal_rule(function, a, b, N)
print(f"Approximated Integral with N={N}: {integral_approx}")

#Hint: the integral of e^(-x**2) between 0 and 1 is 0.746824132812427
#########################################################################################

##### Ex. 2: Simpsons

#########################################################################################

import numpy as np

def simpsons_rule(f, a, b, N):
    h = 1
    integral = f(a) + f(b)  # First and last terms
    
    # Loop through k=1 to N-1
    for k in range(1, N, 2):  # Odd indices (weight 4)
        xk = a + k * h
        integral += 4 * f(xk)

    for k in range(2, N-1, 2):  # Even indices (weight 2)
        xk = a + k * h
        integral += 2 * f(xk)

    return (h / 3) * integral  # Final scaling


def function(x):
    return np.exp(-x**2)

a = 0  # Integration bounds
b = 1  # Integration bounds
N = 0

integral_approx = simpsons_rule(function, a, b, N)
print(f"Approximated Integral with N={N}: {integral_approx}")


#Hint: the integral of e^(-x**2) between 0 and 1 is 0.746824132812427
#########################################################################################

##### Ex. 3: Romberg Integration

#########################################################################################
import numpy as np


def trapezoidal_rule(f, a, b, N):
    h = (b - a) / N  # Step size
    integral = (1/2) * (f(a) + f(b))  # First and last term in sum

    # Sum the middle terms
    for k in range(1, N):
        xk = a + k * h
        integral += f(xk)
    
    return integral * h  # Multiply by step size


def romberg_rule(f, a, b, max_order):
    R = np.zeros((max_order, max_order))  # Create a Romberg table
    
    # First approximation using the trapezoidal rule
    R[0, 0] = trapezoidal_rule(f, a, b, 1)
    
    for i in range(1, max_order):
        N = 2**i  # Number of intervals (doubles each step)
        R[i, 0] = trapezoidal_rule(f, a, b, N)
        
        # Compute extrapolated Romberg values
        for j in range(1, i + 1):
            R[i, j] = R[i, j - 1] + (R[i, j - 1] - R[i - 1, j - 1]) / (4**j - 1)
    
    return R[max_order - 1, max_order - 1]  # Return the most refined estimate


def function(x):
    return np.exp(-x**2)

a = 0  # Integration bounds
b = 1  # Integration bounds
max_order =3

integral_approx = romberg_rule(function, a, b, max_order)
print(f"Approximated Integral with maximum order={max_order}: {integral_approx}")


#Hint: the integral of e^(-x**2) between 0 and 1 is 0.746824132812427
#########################################################################################

##### Ex. 4: Nested Functions

#########################################################################################

def functionA(a, b, c):
    value = a
    value = value + functionB(b, c) + functionC(y = b, x = a)
    return value

#function B does not care what the arguments are called, but it does care about the order. 
    def functionB(x, y): 
        value = x * y    
        return value

#function C does care -- this is the difference between args and kwargs
    def functionC(x = 'a', y = 'b'):
        return x + y

# Oops, we forgot to pass any arguments :(
result = functionA()
print(result)
