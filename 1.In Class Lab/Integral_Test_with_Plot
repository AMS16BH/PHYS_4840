import numpy as np
import time
import matplotlib.pyplot as plt


def trapezoidal(y_values, x_values, N):
    

    a = x_values[0]
    b = x_values[-1]
    h = (b-a)/N #Width of each subinterval

    integral = (1/2) * (y_values[0] + y_values[-1]) * h  # First and last terms

    for k in range(1, N):
        xk = a + k * h  # Compute x_k explicitly
        yk = np.interp(xk, x_values, y_values)  # Interpolate y at x_k manually in loop
        integral += yk * h

    return(integral)


# Simpson's rule for array data
def simpsons(y_values, x_values, N):
    

    a = x_values[0]
    b = x_values[-1]
    h = (b-a)/N 
    end = len(y_values)

    integral = y_values[0]+y_values[-1]

    for k in range(1, N, 2):  # Odd indices (weight 4)
        xk = a + k * h
        yk = np.interp(xk, x_values, y_values)
        integral += 4 * yk

    for k in range(2, N, 2):  # Even indices (weight 2)
        xk = a + k * h
        yk = np.interp(xk, x_values, y_values)
        integral += 2 * yk

    return (h / 3) * integral


# Romberg integration for array data
def romberg(y_values, x_values, max_order):
    
    R = np.zeros((max_order+1, max_order+1))
    a = x_values[0]
    b = x_values[-1]
    N=1
    h = (b-a)/2**N

    # First trapezoidal estimate
    R[0, 0] = trapezoidal(y_values, x_values, N)

    for i in range(1, max_order+1):
        N = 2**i
        h = (b-a)/N

        sum_new_points = sum(np.interp(a + k * h, x_values, y_values) for k in range(1, N, 2))
        R[i, 0] = 0.5 * R[i - 1, 0] + h * sum_new_points

        for j in range(1, i + 1):
            R[i, j] = (4**j * R[i,j-1] - R[i-1,j-1])/(4**j-1)

    return R[max_order, max_order]


def timing_function(integration_method, x_values, y_values, integral_arg):

    start_time = time.perf_counter()
    result = integration_method(y_values, x_values, integral_arg)
    end_time = time.perf_counter()
    
    return end_time - start_time, result



# Function to integrate
def function(x):
    return x * np.exp(-x)

# Precompute data for fair comparisons
x_data = np.linspace(0, 1, 1000)  # High-resolution x values
y_data = function(x_data)
N = len(x_data)
max_order = 1

# Measure timing for custom methods
trap_time, trap_result = timing_function(trapezoidal, x_data, y_data, N)
simp_time, simp_result = timing_function(simpsons, x_data, y_data, N)
romb_time, romb_result = timing_function(romberg, x_data, y_data, max_order)

# True integral value
true_value = 0.26424111765711535680895245967707826510837773793646433098432639660507700851

# Compute errors
trap_error = trap_result/N 
simp_error = (simp_result/N )**2
romb_error = (romb_result/N )**4



# Print results with error analysis
print("\nIntegration Method Comparison")
print("=" * 80) # why 80? https://peps.python.org/pep-0008/
print(f"{'Method':<25}{'Result':<20}{'Error':<20}{'Time (sec)':<15}")
print("-" * 80)
print(f"{'Custom Trapezoidal':<25}{trap_result:<20.8f}{trap_error:<20.8e}{trap_time:<15.6f}")
print(f"{'Custom Simpsons':<25}{simp_result:<20.8f}{simp_error:<20.8e}{simp_time:<15.6f}")
print(f"{'Custom Romberg':<25}{romb_result:<20.8f}{romb_error:<20.8e}{romb_time:<15.6f}")
print("=" * 80)


def plot_integral_test(
    x_data = np.linspace(0, 1, 1000),
    y_data = function(x_data),
    N = len(x_data),
    max_order = 1):

    trap_time, trap_result, trap_error = [], [], []
    simp_time, simp_result, simp_error = [], [], []
    romb_time, romb_result, romb_error = [], [], []

    fig, ax = plt.subplots()

    for i in range(N):

        time_t, result_t = timing_function(trapezoidal, x_data, y_data, i+1)
        trap_time.append(time_t)
        trap_result.append(result_t)
        trap_error.append(result_t/(i+1))

        time_s, result_s = timing_function(simpsons, x_data, y_data, i+1)
        simp_time.append(time_s)
        simp_result.append(result_s)
        simp_error.append(result_s/(i+1))

        time_r, result_r = timing_function(romberg, x_data, y_data, max_order)
        romb_time.append(time_r)
        romb_result.append(result_r)
        romb_error.append(result_r/(max_order))
    
    
    #ax.set_xscale("log")
    #ax.set_yscale("log")    
    ax.plot(trap_time, trap_error,linestyle='-',c='g')
    ax.plot(simp_time, simp_error,linestyle='-',c="r")
    ax.plot(romb_time, romb_error,linestyle='-',c="b")
    plt.show()

plot_integral_test()
    
